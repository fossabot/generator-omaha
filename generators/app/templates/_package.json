{
  "name": "<%= projectName %>",
  "version": "1.0.0",
  "author": "<%= userName %>",
  "license": "MIT",
  "description": "Slightly opinionated boilerplate and workflow for creating web applications",
  "keywords": [
    "webplate",
    "MVC",
    "MarionetteJS",
    "JavaScript",
    "Node",
    "Grunt",
    "Handlebars",
    "Karma",
    "Jasmine"
  ],
  "main": "<%= appDir %>app/main.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/yourGithubUsername/techtonic-app.git"
  },
  "engines": {
    "node": "*"
  },<% if (useBrowserify) { %><% if (!useHandlebars) { %>
  "browser": {
    "underscore": "./node_modules/underscore/underscore-min.js"
  },
  "browserify-shim": {
    "underscore": "_"
  },<% } %>
  "browserify": {
    "transform": [
      "deamdify",<% if (!useHandlebars) { %>
      "browserify-shim",<% } %>
      "aliasify"
    ]
  },
  "aliasify": {
    "aliases": {
      "app":       "./<%= appDir %>app/app",
      "router":    "./<%= appDir %>app/router",
      "templates": "./<%= appDir %>app/templates"
    },
    "replacements": {
      "models/(\\w+)":      "./<%= appDir %>app/models/$1",
      "views/(\\w+)":       "./<%= appDir %>app/views/$1",
      "controllers/(\\w+)": "./<%= appDir %>app/controllers/$1",
      "plugins/(\\w+)":     "./<%= appDir %>app/plugins/$1"
    }
  },<% } %>
  "dependencies": {
    "requirejs": "^2.1.17",
    "jquery": "*",
    "underscore": "^1.8.3",
    "backbone": "^1.2.1",
    "backbone.marionette": "^2.4.2",
    "backbone.radio": "^1.0.1"<% if (useHandlebars) { %>,
    "handlebars": "*"<% } %>
  },
  "devDependencies": {<% if (useBrowserify) { %>
    "browserify": "*",
    "grunt-browserify": "*",
    "aliasify": "^1.9.0",
    "deamdify": "^0.2.0",<% if (!useHandlebars) { %>
    "browserify-shim": "^3.8.12",<% } %><% } %>
    "autoprefixer": "^6.3.1",
    "config": "^1.14.0",
    "cssnano": "^3.4.0",
    "eslint-plugin-backbone": "^2.0.1",
    "globby": "^4.0.0",
    "grunt": "^1.0.0",<% if (use.a11y) { %>
    "grunt-a11y": "^0.1.2",
    "grunt-accessibility": "*",<% } %><% if (use.benchmarks) { %>
    "grunt-benchmark": "^0.3.0",<% } %>
    "grunt-cli": "^1.0.0",
    "grunt-contrib-clean": "*",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-csslint": "^1.0.0",<% if (useHandlebars) { %>
    "grunt-contrib-handlebars": "*",<% } %>
    "grunt-contrib-htmlmin": "^1.0.0",<% if (use.imagemin) { %>
    "grunt-contrib-imagemin": "^1.0.0",<% } %><% if (useLess) { %>
    "grunt-contrib-less": "^1.0.1",<% } %>
    "grunt-contrib-requirejs": "^1.0.0",<% if (useSass) { %>
    "grunt-contrib-sass": "^0.9.2",<% } %>
    "grunt-contrib-uglify": "^1.0.0",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-eslint": "^18.1.0",
    "grunt-express": "^1.4.1",
    "grunt-htmlhint-plus": "*",
    "grunt-jsdoc": "*",<% if (use.jsinspect) { %>
    "grunt-jsinspect": "^1.1.0",<% } %>
    "grunt-jsonlint": "^1.0.4",<% if (!useHandlebars) { %>
    "grunt-contrib-jst": "^0.6.0",<% } %>
    "grunt-karma": "^1.0.0",<% if (use.coveralls) { %>
    "grunt-karma-coveralls": "^2.5.3",<% } %>
    "grunt-open": "^0.2.3",
    "grunt-parallel": "^0.4.1",
    "grunt-plato": "^1.3.0",
    "grunt-postcss": "*",<% if (useBrowserify) { %>
    "grunt-replace": "^0.11.0",<% } %>
    "jasmine-core": "^2.2.0",<% if (use.jsinspect) { %>
    "jsinspect": "*",<% } %>
    "json-server": "*",
    "karma": "^0.13.9",
    "karma-chrome-launcher": "^1.0.0",
    "karma-coverage": "^1.0.0",
    "karma-jasmine": "^1.0.0",
    "karma-phantomjs-launcher": "^1.0.0",
    "karma-firefox-launcher": "^1.0.0",
    "karma-requirejs": "^1.0.0",
    "karma-spec-reporter": "*",
    "load-grunt-tasks": "^3.1.0",
    "lodash": "*",
    "nodemon": "*",
    "node-uuid": "*",
    "phantomjs-prebuilt": "^2.1.3",<% if (styleguide) { %>
    "mdcss": "^1.5.1",
    "mdcss-theme-github": "^2.2.0",<% } %>
    "postcss-safe-parser": "^1.0.4",
    "sinon": "^1.15.4",
    "time-grunt": "^1.1.0",
    "ws": "*"
  },
  "scripts": {
    "test": "grunt test-ci",
    "preversion": "npm test",
    "postversion": "git push && git push --tags",
    "rest-api": "json-server --port 8080 --watch test/data/db.json",<% if (/^linux/.test(process.platform)) { %>
    "prestart": "nohup npm run rest-api &",<% } %>
    "start": " grunt"
  }
}
